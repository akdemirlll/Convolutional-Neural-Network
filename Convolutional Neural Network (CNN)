# Convolutional Neural Network
## importing the libraries and packages
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten, Dropout
from keras.layers import Dense

classifier = Sequential()

### Convolution

classifier.add(Convolution2D(32,(3, 1), input_shape=(64,64,3), activation="relu"))
classifier.add(Convolution2D(32,(1, 3), activation="relu"))
classifier.add(MaxPooling2D(pool_size=(5,5)))
classifier.add(Convolution2D(32,(3, 1), activation="relu"))
classifier.add(Convolution2D(32,(1, 3), activation="relu"))
classifier.add(MaxPooling2D(pool_size=(5,5)))
classifier.add(Flatten())

### Full Connection

classifier.add(Dense(units=32, activation="relu"))
classifier.add(Dense(units=1, activation="sigmoid"))

### Compiling the CNN

classifier.compile(optimizer="adam", loss="binary_crossentropy", metrics= ["accuracy"])

classifier.summary()

## Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
                                    rescale=1./255,
                                    shear_range=0.2,
                                    zoom_range=0.2,
                                    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                  target_size=(64, 64),
                                                  batch_size=32,
                                                  class_mode='binary')

test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size=(64, 64),
                                            batch_size=32,
                                            class_mode='binary')
                                           
classifier.fit_generator(
        training_set,
        steps_per_epoch=250,
        epochs=25,
        validation_data= test_set,
        validation_steps=100)


